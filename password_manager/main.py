import tkinter as tk
from tkinter import ttk, messagebox, filedialog, simpledialog
try:
    import pyperclip
    CLIPBOARD_AVAILABLE = True
except ImportError:
    CLIPBOARD_AVAILABLE = False
    print("Ostrze≈ºenie: pyperclip nie jest dostƒôpny")
from password_manager import PasswordManager
from generator import PasswordGenerator
import threading
import os

class SecurePassGUI:
    """G≈Ç√≥wna klasa interfejsu u≈ºytkownika dla SecurePass."""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("SecurePass - Mened≈ºer Hase≈Ç")
        self.root.geometry("1000x700")
        self.root.minsize(800, 600)
        
        # Inicjalizacja komponent√≥w
        self.manager = PasswordManager()
        self.generator = PasswordGenerator()
        
        # Style
        self.setup_styles()
        
        # Sprawdzenie czy sejf istnieje
        if self.manager.vault_exists():
            self.show_unlock_screen()
        else:
            self.show_setup_screen()
    
    def setup_styles(self):
        """Ustawienia wyglƒÖdu interfejsu."""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Kolory
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'))
        style.configure('Heading.TLabel', font=('Arial', 12, 'bold'))
        style.configure('Success.TLabel', foreground='green')
        style.configure('Error.TLabel', foreground='red')
        style.configure('Warning.TLabel', foreground='orange')
    
    def show_setup_screen(self):
        """Ekran pierwszego uruchomienia."""
        self.clear_window()
        
        # G≈Ç√≥wny frame
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Tytu≈Ç
        title_label = ttk.Label(main_frame, text="üîê Witaj w SecurePass", style='Title.TLabel')
        title_label.pack(pady=(0, 30))
        
        # Instrukcje
        info_text = """Pierwszy raz u≈ºywasz SecurePass!

Musisz utworzyƒá has≈Ço g≈Ç√≥wne, kt√≥re bƒôdzie u≈ºywane do szyfrowania wszystkich Twoich hase≈Ç.

WA≈ªNE:
‚Ä¢ Has≈Ço g≈Ç√≥wne powinno byƒá silne i ≈Çatwe do zapamiƒôtania
‚Ä¢ Je≈õli zapomnisz has≈Ço g≈Ç√≥wne, stracisz dostƒôp do wszystkich danych
‚Ä¢ Nie ma mo≈ºliwo≈õci odzyskania has≈Ça g≈Ç√≥wnego"""
        
        info_label = ttk.Label(main_frame, text=info_text, justify=tk.LEFT)
        info_label.pack(pady=(0, 30))
        
        # Formularz has≈Ça g≈Ç√≥wnego
        form_frame = ttk.LabelFrame(main_frame, text="Utw√≥rz has≈Ço g≈Ç√≥wne", padding="20")
        form_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Has≈Ço g≈Ç√≥wne
        ttk.Label(form_frame, text="Has≈Ço g≈Ç√≥wne:").grid(row=0, column=0, sticky=tk.W, pady=(0, 5))
        self.master_password_var = tk.StringVar()
        password_entry = ttk.Entry(form_frame, textvariable=self.master_password_var, show="*", width=40)
        password_entry.grid(row=1, column=0, columnspan=2, sticky=tk.W+tk.E, pady=(0, 10))
        
        # Powt√≥rz has≈Ço
        ttk.Label(form_frame, text="Powt√≥rz has≈Ço g≈Ç√≥wne:").grid(row=2, column=0, sticky=tk.W, pady=(0, 5))
        self.confirm_password_var = tk.StringVar()
        confirm_entry = ttk.Entry(form_frame, textvariable=self.confirm_password_var, show="*", width=40)
        confirm_entry.grid(row=3, column=0, columnspan=2, sticky=tk.W+tk.E, pady=(0, 10))
        
        # Przycisk poka≈º/ukryj has≈Ço
        show_password_var = tk.BooleanVar()
        def toggle_password():
            if show_password_var.get():
                password_entry.config(show="")
                confirm_entry.config(show="")
            else:
                password_entry.config(show="*")
                confirm_entry.config(show="*")
        
        show_check = ttk.Checkbutton(form_frame, text="Poka≈º has≈Ça", 
                                   variable=show_password_var, command=toggle_password)
        show_check.grid(row=4, column=0, sticky=tk.W, pady=(0, 20))
        
        form_frame.columnconfigure(0, weight=1)
        
        # Przyciski
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X)
        
        create_button = ttk.Button(button_frame, text="Utw√≥rz sejf", command=self.create_vault)
        create_button.pack(side=tk.RIGHT, padx=(10, 0))
        
        # Generator has≈Ça
        generate_button = ttk.Button(button_frame, text="Wygeneruj has≈Ço g≈Ç√≥wne", 
                                   command=self.generate_master_password)
        generate_button.pack(side=tk.RIGHT)
        
        # Focus na pierwsze pole
        password_entry.focus()
        
        # Bind Enter
        password_entry.bind('<Return>', lambda e: confirm_entry.focus())
        confirm_entry.bind('<Return>', lambda e: self.create_vault())
    
    def show_unlock_screen(self):
        """Ekran logowania do sejfu."""
        self.clear_window()
        
        # G≈Ç√≥wny frame
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Tytu≈Ç
        title_label = ttk.Label(main_frame, text="üîê SecurePass", style='Title.TLabel')
        title_label.pack(pady=(50, 30))
        
        # Formularz odblokowywania
        form_frame = ttk.LabelFrame(main_frame, text="Odblokuj sejf", padding="20")
        form_frame.pack(anchor=tk.CENTER)
        
        ttk.Label(form_frame, text="Has≈Ço g≈Ç√≥wne:").grid(row=0, column=0, sticky=tk.W, pady=(0, 5))
        self.unlock_password_var = tk.StringVar()
        password_entry = ttk.Entry(form_frame, textvariable=self.unlock_password_var, 
                                 show="*", width=30)
        password_entry.grid(row=1, column=0, pady=(0, 20))
        
        unlock_button = ttk.Button(form_frame, text="Odblokuj", command=self.unlock_vault)
        unlock_button.grid(row=2, column=0, pady=(0, 10))
        
        # Status
        self.status_var = tk.StringVar()
        status_label = ttk.Label(form_frame, textvariable=self.status_var, style='Error.TLabel')
        status_label.grid(row=3, column=0)
        
        # Focus i bind Enter
        password_entry.focus()
        password_entry.bind('<Return>', lambda e: self.unlock_vault())
    
    def show_main_screen(self):
        """G≈Ç√≥wny ekran aplikacji po zalogowaniu."""
        self.clear_window()
        
        # Menu bar
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # Menu File
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Plik", menu=file_menu)
        file_menu.add_command(label="Nowy wpis", command=self.show_add_entry_dialog, accelerator="Ctrl+N")
        file_menu.add_separator()
        file_menu.add_command(label="Eksportuj...", command=self.export_data)
        file_menu.add_command(label="Importuj...", command=self.import_data)
        file_menu.add_separator()
        file_menu.add_command(label="Zablokuj sejf", command=self.lock_vault, accelerator="Ctrl+L")
        file_menu.add_command(label="Wyj≈õcie", command=self.root.quit)
        
        # Menu Tools
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Narzƒôdzia", menu=tools_menu)
        tools_menu.add_command(label="Generator hase≈Ç", command=self.show_password_generator)
        tools_menu.add_command(label="Statystyki sejfu", command=self.show_vault_stats)
        
        # Menu Help
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Pomoc", menu=help_menu)
        help_menu.add_command(label="O programie", command=self.show_about)
        
        # Toolbar
        toolbar = ttk.Frame(self.root)
        toolbar.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(toolbar, text="‚ûï Nowy wpis", command=self.show_add_entry_dialog).pack(side=tk.LEFT, padx=5)
        ttk.Button(toolbar, text="üîß Generator", command=self.show_password_generator).pack(side=tk.LEFT, padx=5)
        ttk.Button(toolbar, text="üîí Zablokuj", command=self.lock_vault).pack(side=tk.RIGHT, padx=5)
        
        # Separator
        ttk.Separator(self.root, orient=tk.HORIZONTAL).pack(fill=tk.X, pady=5)
        
        # G≈Ç√≥wny content
        content_frame = ttk.Frame(self.root)
        content_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Wyszukiwarka
        search_frame = ttk.Frame(content_frame)
        search_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(search_frame, text="üîç Szukaj:").pack(side=tk.LEFT, padx=(0, 5))
        self.search_var = tk.StringVar()
        search_entry = ttk.Entry(search_frame, textvariable=self.search_var, width=30)
        search_entry.pack(side=tk.LEFT, padx=(0, 10))
        search_entry.bind('<KeyRelease>', self.on_search)
        
        clear_button = ttk.Button(search_frame, text="Wyczy≈õƒá", command=self.clear_search)
        clear_button.pack(side=tk.LEFT)
        
        # Lista hase≈Ç
        self.setup_password_list(content_frame)
        
        # ≈Åadowanie danych
        self.refresh_password_list()
        
        # Keyboard shortcuts
        self.root.bind('<Control-n>', lambda e: self.show_add_entry_dialog())
        self.root.bind('<Control-l>', lambda e: self.lock_vault())
        self.root.bind('<F5>', lambda e: self.refresh_password_list())
    
    def setup_password_list(self, parent):
        """Konfiguruje listƒô hase≈Ç."""
        # Frame dla listy
        list_frame = ttk.Frame(parent)
        list_frame.pack(fill=tk.BOTH, expand=True)
        
        # Treeview
        columns = ('service', 'username', 'created', 'updated')
        self.tree = ttk.Treeview(list_frame, columns=columns, show='headings', height=15)
        
        # Nag≈Ç√≥wki
        self.tree.heading('service', text='Serwis')
        self.tree.heading('username', text='U≈ºytkownik')
        self.tree.heading('created', text='Utworzono')
        self.tree.heading('updated', text='Zaktualizowano')
        
        # Szeroko≈õci kolumn
        self.tree.column('service', width=200)
        self.tree.column('username', width=150)
        self.tree.column('created', width=120)
        self.tree.column('updated', width=120)
        
        # Scrollbary
        v_scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.tree.yview)
        h_scrollbar = ttk.Scrollbar(list_frame, orient=tk.HORIZONTAL, command=self.tree.xview)
        self.tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # Grid layout
        self.tree.grid(row=0, column=0, sticky=tk.NSEW)
        v_scrollbar.grid(row=0, column=1, sticky=tk.NS)
        h_scrollbar.grid(row=1, column=0, sticky=tk.EW)
        
        list_frame.grid_rowconfigure(0, weight=1)
        list_frame.grid_columnconfigure(0, weight=1)
        
        # Context menu
        self.context_menu = tk.Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="Kopiuj has≈Ço", command=self.copy_password)
        self.context_menu.add_command(label="Kopiuj nazwƒô u≈ºytkownika", command=self.copy_username)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="Edytuj", command=self.edit_entry)
        self.context_menu.add_command(label="Usu≈Ñ", command=self.delete_entry)
        
        # Bindings
        self.tree.bind('<Double-1>', self.on_double_click)
        self.tree.bind('<Button-3>', self.show_context_menu)
        self.tree.bind('<Return>', self.copy_password)
    
    def create_vault(self):
        """Tworzy nowy sejf."""
        password = self.master_password_var.get()
        confirm = self.confirm_password_var.get()
        
        if not password:
            messagebox.showerror("B≈ÇƒÖd", "Has≈Ço g≈Ç√≥wne nie mo≈ºe byƒá puste!")
            return
        
        if len(password) < 8:
            messagebox.showerror("B≈ÇƒÖd", "Has≈Ço g≈Ç√≥wne musi mieƒá co najmniej 8 znak√≥w!")
            return
        
        if password != confirm:
            messagebox.showerror("B≈ÇƒÖd", "Has≈Ça nie sƒÖ identyczne!")
            return
        
        # Sprawdzenie si≈Çy has≈Ça
        strength = self.generator.check_password_strength(password)
        if strength['score'] < 40:
            result = messagebox.askyesno("S≈Çabe has≈Ço", 
                f"Has≈Ço jest {strength['level'].lower()}.\n\n"
                f"Sugestie:\n" + "\n".join(strength['feedback'][:3]) + 
                "\n\nCzy mimo to chcesz kontynuowaƒá?")
            if not result:
                return
        
        # Tworzenie sejfu
        if self.manager.create_vault(password):
            messagebox.showinfo("Sukces", "Sejf zosta≈Ç utworzony pomy≈õlnie!")
            self.show_main_screen()
        else:
            messagebox.showerror("B≈ÇƒÖd", "Nie uda≈Ço siƒô utworzyƒá sejfu!")
    
    def generate_master_password(self):
        """Generuje has≈Ço g≈Ç√≥wne."""
        password = self.generator.generate_password(
            length=16,
            use_uppercase=True,
            use_lowercase=True,
            use_digits=True,
            use_special=True,
            exclude_similar=True
        )
        
        # Wy≈õwietl has≈Ço w oknie dialogowym
        dialog = tk.Toplevel(self.root)
        dialog.title("Wygenerowane has≈Ço g≈Ç√≥wne")
        dialog.geometry("400x300")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centrowanie okna
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))
        
        frame = ttk.Frame(dialog, padding="20")
        frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(frame, text="Wygenerowane has≈Ço g≈Ç√≥wne:", style='Heading.TLabel').pack(pady=(0, 10))
        
        # Entry z has≈Çem (tylko do odczytu)
        password_var = tk.StringVar(value=password)
        password_entry = ttk.Entry(frame, textvariable=password_var, state='readonly', width=50)
        password_entry.pack(pady=(0, 10))
        
        # Przycisk kopiuj
        def copy_to_clipboard():
            if CLIPBOARD_AVAILABLE:
                try:
                    pyperclip.copy(password)
                    messagebox.showinfo("Skopiowano", "Has≈Ço zosta≈Ço skopiowane do schowka!")
                except Exception:
                    # Fallback - poka≈º has≈Ço w oknie
                    show_password_dialog(password)
            else:
                show_password_dialog(password)
        
        def show_password_dialog(pwd):
            pwd_dialog = tk.Toplevel(dialog)
            pwd_dialog.title("Has≈Ço do skopiowania")
            pwd_dialog.geometry("400x150")
            pwd_dialog.transient(dialog)
            pwd_dialog.grab_set()
            
            frame = ttk.Frame(pwd_dialog, padding="20")
            frame.pack(fill=tk.BOTH, expand=True)
            
            ttk.Label(frame, text="Skopiuj has≈Ço rƒôcznie:").pack(pady=(0, 10))
            
            pwd_var = tk.StringVar(value=pwd)
            pwd_entry = ttk.Entry(frame, textvariable=pwd_var, state='readonly', width=50)
            pwd_entry.pack(pady=(0, 10))
            pwd_entry.select_range(0, tk.END)
            pwd_entry.focus()
            
            ttk.Button(frame, text="Zamknij", command=pwd_dialog.destroy).pack()
        
        ttk.Button(frame, text="Kopiuj do schowka", command=copy_to_clipboard).pack(pady=(0, 10))
        
        # Analiza si≈Çy
        strength = self.generator.check_password_strength(password)
        
        ttk.Label(frame, text=f"Si≈Ça has≈Ça: {strength['level']} ({strength['score']}/100)", 
                 style='Success.TLabel').pack(pady=(0, 10))
        
        if strength['feedback']:
            feedback_text = "Uwagi:\n" + "\n".join(strength['feedback'])
            ttk.Label(frame, text=feedback_text, justify=tk.LEFT).pack(pady=(0, 10))
        
        # Przyciski
        button_frame = ttk.Frame(frame)
        button_frame.pack(fill=tk.X, pady=(10, 0))
        
        def use_password():
            self.master_password_var.set(password)
            self.confirm_password_var.set(password)
            dialog.destroy()
        
        ttk.Button(button_frame, text="U≈ºyj tego has≈Ça", command=use_password).pack(side=tk.RIGHT, padx=(10, 0))
        ttk.Button(button_frame, text="Zamknij", command=dialog.destroy).pack(side=tk.RIGHT)
    
    def unlock_vault(self):
        """Odblokowuje sejf."""
        password = self.unlock_password_var.get()
        
        if not password:
            self.status_var.set("Wprowad≈∫ has≈Ço g≈Ç√≥wne!")
            return
        
        if self.manager.unlock_vault(password):
            self.show_main_screen()
        else:
            self.status_var.set("Nieprawid≈Çowe has≈Ço g≈Ç√≥wne!")
            self.unlock_password_var.set("")
    
    def lock_vault(self):
        """Blokuje sejf."""
        result = messagebox.askyesno("Potwierdzenie", "Czy na pewno chcesz zablokowaƒá sejf?")
        if result:
            self.manager.lock_vault()
            self.show_unlock_screen()
    
    def refresh_password_list(self):
        """Od≈õwie≈ºa listƒô hase≈Ç."""
        # Wyczy≈õƒá listƒô
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # Dodaj wpisy
        entries = self.manager.get_entries()
        for i, entry in enumerate(entries):
            # Formatowanie dat
            created = entry.created_at[:10] if entry.created_at else ""
            updated = entry.updated_at[:10] if entry.updated_at else ""
            
            self.tree.insert('', tk.END, values=(
                entry.service,
                entry.username,
                created,
                updated
            ), tags=(str(i),))
    
    def on_search(self, event=None):
        """Obs≈Çuguje wyszukiwanie."""
        query = self.search_var.get()
        
        # Wyczy≈õƒá listƒô
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        if not query:
            self.refresh_password_list()
            return
        
        # Wyszukaj i wy≈õwietl pasujƒÖce wpisy
        indices = self.manager.search_entries(query)
        entries = self.manager.get_entries()
        
        for i in indices:
            entry = entries[i]
            created = entry.created_at[:10] if entry.created_at else ""
            updated = entry.updated_at[:10] if entry.updated_at else ""
            
            self.tree.insert('', tk.END, values=(
                entry.service,
                entry.username,
                created,
                updated
            ), tags=(str(i),))
    
    def clear_search(self):
        """Czy≈õci wyszukiwanie."""
        self.search_var.set("")
        self.refresh_password_list()
    
    def show_add_entry_dialog(self):
        """Wy≈õwietla dialog dodawania nowego wpisu."""
        self.show_entry_dialog()
    
    def show_entry_dialog(self, entry_index=None):
        """Wy≈õwietla dialog dodawania/edycji wpisu."""
        # Okre≈õl czy to edycja czy dodawanie
        is_edit = entry_index is not None
        title = "Edytuj wpis" if is_edit else "Nowy wpis"
        
        # Pobierz dane wpisu je≈õli edycja
        entry_data = None
        if is_edit:
            entries = self.manager.get_entries()
            if 0 <= entry_index < len(entries):
                entry_data = entries[entry_index]
        
        # Utw√≥rz dialog
        dialog = tk.Toplevel(self.root)
        dialog.title(title)
        dialog.geometry("600x500")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centrowanie okna
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))
        
        # G≈Ç√≥wny frame
        main_frame = ttk.Frame(dialog, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Formularz
        # Serwis
        ttk.Label(main_frame, text="Serwis/Strona:").grid(row=0, column=0, sticky=tk.W, pady=(0, 5))
        service_var = tk.StringVar(value=entry_data.service if entry_data else "")
        service_entry = ttk.Entry(main_frame, textvariable=service_var, width=40)
        service_entry.grid(row=1, column=0, columnspan=2, sticky=tk.W+tk.E, pady=(0, 10))
        
        # Nazwa u≈ºytkownika
        ttk.Label(main_frame, text="Nazwa u≈ºytkownika/E-mail:").grid(row=2, column=0, sticky=tk.W, pady=(0, 5))
        username_var = tk.StringVar(value=entry_data.username if entry_data else "")
        username_entry = ttk.Entry(main_frame, textvariable=username_var, width=40)
        username_entry.grid(row=3, column=0, columnspan=2, sticky=tk.W+tk.E, pady=(0, 10))
        
        # Has≈Ço
        ttk.Label(main_frame, text="Has≈Ço:").grid(row=4, column=0, sticky=tk.W, pady=(0, 5))
        password_var = tk.StringVar(value=entry_data.password if entry_data else "")
        password_entry = ttk.Entry(main_frame, textvariable=password_var, show="*", width=30)
        password_entry.grid(row=5, column=0, sticky=tk.W+tk.E, pady=(0, 5))
        
        # Przycisk generuj has≈Ço
        def generate_password():
            password = self.generator.generate_password()
            password_var.set(password)
        
        generate_btn = ttk.Button(main_frame, text="Generuj", command=generate_password)
        generate_btn.grid(row=5, column=1, padx=(5, 0), pady=(0, 5))
        
        # Poka≈º has≈Ço
        show_var = tk.BooleanVar()
        def toggle_password():
            password_entry.config(show="" if show_var.get() else "*")
        
        show_check = ttk.Checkbutton(main_frame, text="Poka≈º has≈Ço", variable=show_var, command=toggle_password)
        show_check.grid(row=6, column=0, sticky=tk.W, pady=(0, 10))
        
        # Notatki
        ttk.Label(main_frame, text="Notatki:").grid(row=7, column=0, sticky=tk.W, pady=(0, 5))
        notes_text = tk.Text(main_frame, width=40, height=5)
        notes_text.grid(row=8, column=0, columnspan=2, sticky=tk.W+tk.E, pady=(0, 20))
        
        if entry_data and entry_data.notes:
            notes_text.insert(tk.END, entry_data.notes)
        
        # Konfiguracja grid
        main_frame.columnconfigure(0, weight=1)
        
        # Przyciski
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=9, column=0, columnspan=2, sticky=tk.W+tk.E)
        
        def save_entry():
            service = service_var.get().strip()
            username = username_var.get().strip()
            password = password_var.get()
            notes = notes_text.get(1.0, tk.END).strip()
            
            if not service:
                messagebox.showerror("B≈ÇƒÖd", "Nazwa serwisu jest wymagana!")
                return
            
            if not username:
                messagebox.showerror("B≈ÇƒÖd", "Nazwa u≈ºytkownika jest wymagana!")
                return
            
            if not password:
                messagebox.showerror("B≈ÇƒÖd", "Has≈Ço jest wymagane!")
                return
            
            # Zapisz wpis
            if is_edit:
                success = self.manager.update_entry(entry_index, service, username, password, notes)
            else:
                success = self.manager.add_entry(service, username, password, notes)
            
            if success:
                self.refresh_password_list()
                dialog.destroy()
                messagebox.showinfo("Sukces", f"Wpis zosta≈Ç {'zaktualizowany' if is_edit else 'dodany'} pomy≈õlnie!")
            else:
                if is_edit:
                    messagebox.showerror("B≈ÇƒÖd", "Nie uda≈Ço siƒô zaktualizowaƒá wpisu!")
                else:
                    messagebox.showerror("B≈ÇƒÖd", "Wpis dla tego serwisu i u≈ºytkownika ju≈º istnieje!")
        
        ttk.Button(button_frame, text="Zapisz", command=save_entry).pack(side=tk.RIGHT, padx=(10, 0))
        ttk.Button(button_frame, text="Anuluj", command=dialog.destroy).pack(side=tk.RIGHT)
        
        # Focus na pierwsze pole
        if not is_edit:
            service_entry.focus()
        else:
            password_entry.focus()
    
    def on_double_click(self, event):
        """Obs≈Çuguje podw√≥jne klikniƒôcie na wpis."""
        self.copy_password()
    
    def show_context_menu(self, event):
        """Wy≈õwietla menu kontekstowe."""
        selection = self.tree.selection()
        if selection:
            self.context_menu.post(event.x_root, event.y_root)
    
    def copy_password(self, event=None):
        """Kopiuje has≈Ço do schowka."""
        selection = self.tree.selection()
        if not selection:
            return
        
        # Pobierz indeks wpisu
        item = self.tree.item(selection[0])
        tags = item['tags']
        if not tags:
            return
        
        entry_index = int(tags[0])
        entries = self.manager.get_entries()
        
        if 0 <= entry_index < len(entries):
            password = entries[entry_index].password
            
            if CLIPBOARD_AVAILABLE:
                try:
                    pyperclip.copy(password)
                    self.show_temporary_status("Has≈Ço skopiowane do schowka!", 2000)
                    return
                except Exception:
                    pass
            
            # Fallback - poka≈º has≈Ço w oknie dialogowym
            self.show_password_dialog(password)
    
    def show_password_dialog(self, password):
        """Wy≈õwietla has≈Ço w oknie dialogowym jako fallback."""
        dialog = tk.Toplevel(self.root)
        dialog.title("Has≈Ço")
        dialog.geometry("400x150")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centrowanie okna
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))
        
        frame = ttk.Frame(dialog, padding="20")
        frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(frame, text="Skopiuj has≈Ço rƒôcznie:").pack(pady=(0, 10))
        
        password_var = tk.StringVar(value=password)
        password_entry = ttk.Entry(frame, textvariable=password_var, state='readonly', width=50)
        password_entry.pack(pady=(0, 10))
        password_entry.select_range(0, tk.END)
        password_entry.focus()
        
        ttk.Button(frame, text="Zamknij", command=dialog.destroy).pack()
    
    def copy_username(self):
        """Kopiuje nazwƒô u≈ºytkownika do schowka."""
        selection = self.tree.selection()
        if not selection:
            return
        
        item = self.tree.item(selection[0])
        tags = item['tags']
        if not tags:
            return
        
        entry_index = int(tags[0])
        entries = self.manager.get_entries()
        
        if 0 <= entry_index < len(entries):
            username = entries[entry_index].username
            
            if CLIPBOARD_AVAILABLE:
                try:
                    pyperclip.copy(username)
                    self.show_temporary_status("Nazwa u≈ºytkownika skopiowana do schowka!", 2000)
                    return
                except Exception:
                    pass
            
            # Fallback - poka≈º username w oknie dialogowym
            self.show_username_dialog(username)
    
    def show_username_dialog(self, username):
        """Wy≈õwietla nazwƒô u≈ºytkownika w oknie dialogowym jako fallback."""
        dialog = tk.Toplevel(self.root)
        dialog.title("Nazwa u≈ºytkownika")
        dialog.geometry("400x150")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centrowanie okna
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))
        
        frame = ttk.Frame(dialog, padding="20")
        frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(frame, text="Skopiuj nazwƒô u≈ºytkownika rƒôcznie:").pack(pady=(0, 10))
        
        username_var = tk.StringVar(value=username)
        username_entry = ttk.Entry(frame, textvariable=username_var, state='readonly', width=50)
        username_entry.pack(pady=(0, 10))
        username_entry.select_range(0, tk.END)
        username_entry.focus()
        
        ttk.Button(frame, text="Zamknij", command=dialog.destroy).pack()
    
    def edit_entry(self):
        """Edytuje wybrany wpis."""
        selection = self.tree.selection()
        if not selection:
            return
        
        item = self.tree.item(selection[0])
        tags = item['tags']
        if not tags:
            return
        
        entry_index = int(tags[0])
        self.show_entry_dialog(entry_index)
    
    def delete_entry(self):
        """Usuwa wybrany wpis."""
        selection = self.tree.selection()
        if not selection:
            return
        
        item = self.tree.item(selection[0])
        tags = item['tags']
        if not tags:
            return
        
        entry_index = int(tags[0])
        entries = self.manager.get_entries()
        
        if 0 <= entry_index < len(entries):
            entry = entries[entry_index]
            result = messagebox.askyesno("Potwierdzenie", 
                f"Czy na pewno chcesz usunƒÖƒá wpis dla '{entry.service}'?")
            
            if result:
                if self.manager.delete_entry(entry_index):
                    self.refresh_password_list()
                    messagebox.showinfo("Sukces", "Wpis zosta≈Ç usuniƒôty!")
                else:
                    messagebox.showerror("B≈ÇƒÖd", "Nie uda≈Ço siƒô usunƒÖƒá wpisu!")
    
    def show_password_generator(self):
        """Wy≈õwietla generator hase≈Ç."""
        dialog = tk.Toplevel(self.root)
        dialog.title("Generator hase≈Ç")
        dialog.geometry("500x500")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centrowanie okna
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))
        
        main_frame = ttk.Frame(dialog, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Opcje generatora
        options_frame = ttk.LabelFrame(main_frame, text="Opcje generatora", padding="10")
        options_frame.pack(fill=tk.X, pady=(0, 10))
        
        # D≈Çugo≈õƒá
        ttk.Label(options_frame, text="D≈Çugo≈õƒá has≈Ça:").grid(row=0, column=0, sticky=tk.W, pady=(0, 5))
        length_var = tk.IntVar(value=16)
        length_spin = ttk.Spinbox(options_frame, from_=4, to=128, textvariable=length_var, width=10)
        length_spin.grid(row=0, column=1, sticky=tk.W, pady=(0, 5))
        
        # Checkboxy
        uppercase_var = tk.BooleanVar(value=True)
        lowercase_var = tk.BooleanVar(value=True)
        digits_var = tk.BooleanVar(value=True)
        special_var = tk.BooleanVar(value=True)
        exclude_similar_var = tk.BooleanVar(value=True)
        
        ttk.Checkbutton(options_frame, text="Wielkie litery (A-Z)", variable=uppercase_var).grid(row=1, column=0, columnspan=2, sticky=tk.W, pady=2)
        ttk.Checkbutton(options_frame, text="Ma≈Çe litery (a-z)", variable=lowercase_var).grid(row=2, column=0, columnspan=2, sticky=tk.W, pady=2)
        ttk.Checkbutton(options_frame, text="Cyfry (0-9)", variable=digits_var).grid(row=3, column=0, columnspan=2, sticky=tk.W, pady=2)
        ttk.Checkbutton(options_frame, text="Znaki specjalne (!@#$...)", variable=special_var).grid(row=4, column=0, columnspan=2, sticky=tk.W, pady=2)
        ttk.Checkbutton(options_frame, text="Wyklucz podobne znaki (0,O,l,1)", variable=exclude_similar_var).grid(row=5, column=0, columnspan=2, sticky=tk.W, pady=2)
        
        # Wygenerowane has≈Ço
        result_frame = ttk.LabelFrame(main_frame, text="Wygenerowane has≈Ço", padding="10")
        result_frame.pack(fill=tk.X, pady=(0, 10))
        
        password_var = tk.StringVar()
        password_entry = ttk.Entry(result_frame, textvariable=password_var, state='readonly', width=50)
        password_entry.pack(fill=tk.X, pady=(0, 10))
        
        # Analiza si≈Çy
        strength_var = tk.StringVar()
        strength_label = ttk.Label(result_frame, textvariable=strength_var, style='Success.TLabel')
        strength_label.pack(pady=(0, 10))
        
        feedback_var = tk.StringVar()
        feedback_label = ttk.Label(result_frame, textvariable=feedback_var, justify=tk.LEFT)
        feedback_label.pack()
        
        def generate():
            try:
                password = self.generator.generate_password(
                    length=length_var.get(),
                    use_uppercase=uppercase_var.get(),
                    use_lowercase=lowercase_var.get(),
                    use_digits=digits_var.get(),
                    use_special=special_var.get(),
                    exclude_similar=exclude_similar_var.get()
                )
                password_var.set(password)
                
                # Analiza si≈Çy
                strength = self.generator.check_password_strength(password)
                strength_var.set(f"Si≈Ça has≈Ça: {strength['level']} ({strength['score']}/100)")
                
                if strength['feedback']:
                    feedback_var.set("Uwagi: " + ", ".join(strength['feedback'][:3]))
                else:
                    feedback_var.set("Has≈Ço spe≈Çnia wszystkie kryteria bezpiecze≈Ñstwa!")
                
            except ValueError as e:
                messagebox.showerror("B≈ÇƒÖd", str(e))
        
        def copy_password():
            password = password_var.get()
            if password:
                if CLIPBOARD_AVAILABLE:
                    try:
                        pyperclip.copy(password)
                        messagebox.showinfo("Skopiowano", "Has≈Ço zosta≈Ço skopiowane do schowka!")
                        return
                    except Exception:
                        pass
                
                # Fallback - poka≈º has≈Ço do rƒôcznego skopiowania
                copy_dialog = tk.Toplevel(dialog)
                copy_dialog.title("Skopiuj has≈Ço")
                copy_dialog.geometry("400x150")
                copy_dialog.transient(dialog)
                copy_dialog.grab_set()
                
                copy_frame = ttk.Frame(copy_dialog, padding="20")
                copy_frame.pack(fill=tk.BOTH, expand=True)
                
                ttk.Label(copy_frame, text="Zaznacz i skopiuj has≈Ço rƒôcznie:").pack(pady=(0, 10))
                
                pwd_var = tk.StringVar(value=password)
                pwd_entry = ttk.Entry(copy_frame, textvariable=pwd_var, state='readonly', width=50)
                pwd_entry.pack(pady=(0, 10))
                pwd_entry.select_range(0, tk.END)
                pwd_entry.focus()
                
                ttk.Button(copy_frame, text="Zamknij", command=copy_dialog.destroy).pack()
        
        # Przyciski
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X)
        
        ttk.Button(button_frame, text="Generuj", command=generate).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="Kopiuj", command=copy_password).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="Zamknij", command=dialog.destroy).pack(side=tk.RIGHT)
        
        # Wygeneruj pierwsze has≈Ço
        generate()
    
    def export_data(self):
        """Eksportuje dane do pliku."""
        filename = filedialog.asksaveasfilename(
            title="Eksportuj dane",
            defaultextension=".enc",
            filetypes=[("Pliki zaszyfrowane", "*.enc"), ("Wszystkie pliki", "*.*")]
        )
        
        if filename:
            if self.manager.export_data(filename):
                messagebox.showinfo("Sukces", f"Dane zosta≈Çy wyeksportowane do pliku:\n{filename}")
            else:
                messagebox.showerror("B≈ÇƒÖd", "Nie uda≈Ço siƒô wyeksportowaƒá danych!")
    
    def import_data(self):
        """Importuje dane z pliku."""
        filename = filedialog.askopenfilename(
            title="Importuj dane",
            filetypes=[("Pliki zaszyfrowane", "*.enc"), ("Wszystkie pliki", "*.*")]
        )
        
        if filename:
            result = messagebox.askyesno("Potwierdzenie", 
                "Import danych doda nowe wpisy do istniejƒÖcego sejfu.\n"
                "Wpisy z takimi samymi danymi (serwis + u≈ºytkownik) zostanƒÖ pominiƒôte.\n\n"
                "Czy chcesz kontynuowaƒá?")
            
            if result:
                if self.manager.import_data(filename):
                    self.refresh_password_list()
                    messagebox.showinfo("Sukces", "Dane zosta≈Çy zaimportowane pomy≈õlnie!")
                else:
                    messagebox.showerror("B≈ÇƒÖd", 
                        "Nie uda≈Ço siƒô zaimportowaƒá danych!\n"
                        "Sprawd≈∫ czy plik jest prawid≈Çowy i czy u≈ºywasz poprawnego has≈Ça g≈Ç√≥wnego.")
    
    def show_vault_stats(self):
        """Wy≈õwietla statystyki sejfu."""
        stats = self.manager.get_vault_stats()
        
        if not stats:
            messagebox.showinfo("Statystyki", "Brak danych do wy≈õwietlenia.")
            return
        
        dialog = tk.Toplevel(self.root)
        dialog.title("Statystyki sejfu")
        dialog.geometry("400x300")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centrowanie okna
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))
        
        main_frame = ttk.Frame(dialog, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(main_frame, text="üìä Statystyki sejfu", style='Title.TLabel').pack(pady=(0, 20))
        
        # Statystyki
        stats_text = f"""
≈ÅƒÖczna liczba wpis√≥w: {stats.get('total_entries', 0)}

S≈Çabe has≈Ça (< 8 znak√≥w): {stats.get('weak_passwords', 0)}

Duplikaty hase≈Ç: {stats.get('duplicate_passwords', 0)}
"""
        
        if stats.get('total_entries', 0) > 0:
            oldest = stats.get('oldest_entry', '')[:10] if stats.get('oldest_entry') else 'Brak'
            newest = stats.get('newest_entry', '')[:10] if stats.get('newest_entry') else 'Brak'
            
            stats_text += f"""
Najstarszy wpis: {oldest}

Najnowszy wpis: {newest}
"""
        
        ttk.Label(main_frame, text=stats_text, justify=tk.LEFT).pack(pady=(0, 20))
        
        # Rekomendacje
        recommendations = []
        if stats.get('weak_passwords', 0) > 0:
            recommendations.append("‚Ä¢ Zmie≈Ñ s≈Çabe has≈Ça na silniejsze")
        if stats.get('duplicate_passwords', 0) > 0:
            recommendations.append("‚Ä¢ U≈ºyj unikalnych hase≈Ç dla ka≈ºdego serwisu")
        
        if recommendations:
            ttk.Label(main_frame, text="üîí Rekomendacje bezpiecze≈Ñstwa:", style='Heading.TLabel').pack(anchor=tk.W, pady=(10, 5))
            rec_text = "\n".join(recommendations)
            ttk.Label(main_frame, text=rec_text, justify=tk.LEFT, style='Warning.TLabel').pack(anchor=tk.W, pady=(0, 20))
        else:
            ttk.Label(main_frame, text="‚úÖ Wszystkie has≈Ça spe≈ÇniajƒÖ podstawowe kryteria bezpiecze≈Ñstwa!", 
                     style='Success.TLabel').pack(pady=(10, 20))
        
        ttk.Button(main_frame, text="Zamknij", command=dialog.destroy).pack()
    
    def show_about(self):
        """Wy≈õwietla informacje o programie."""
        about_text = """üîê SecurePass v1.0

Bezpieczny mened≈ºer hase≈Ç z szyfrowaniem AES-256

Funkcje:
‚Ä¢ Szyfrowanie AES-256 z PBKDF2
‚Ä¢ Generator silnych hase≈Ç
‚Ä¢ Intuicyjny interfejs graficzny
‚Ä¢ Eksport/import danych
‚Ä¢ Wyszukiwanie wpis√≥w

¬© 2025 Wszystkie prawa zastrze≈ºone"""
        
        messagebox.showinfo("O programie", about_text)
    
    def show_temporary_status(self, message, duration=3000):
        """Wy≈õwietla tymczasowy status na pasku."""
        # Prosta implementacja - mo≈ºna rozbudowaƒá
        self.root.after(100, lambda: print(f"Status: {message}"))
    
    def clear_window(self):
        """Czy≈õci okno z wszystkich widget√≥w."""
        for widget in self.root.winfo_children():
            widget.destroy()
        
        # Usu≈Ñ menu
        self.root.config(menu="")
    
    def run(self):
        """Uruchamia aplikacjƒô."""
        self.root.mainloop()

def main():
    """G≈Ç√≥wna funkcja aplikacji."""
    global CLIPBOARD_AVAILABLE
    
    # Sprawd≈∫ czy pyperclip jest dostƒôpny
    if CLIPBOARD_AVAILABLE:
        try:
            import pyperclip
            pyperclip.copy("")  # Test
            print("Kopiowanie do schowka: DOSTƒòPNE")
        except Exception as e:
            CLIPBOARD_AVAILABLE = False
            print(f"Ostrze≈ºenie: Funkcja kopiowania nie jest dostƒôpna: {e}")
            print("Has≈Ça bƒôdƒÖ wy≈õwietlane w oknach dialogowych do rƒôcznego skopiowania.")
    else:
        print("Ostrze≈ºenie: pyperclip nie jest zainstalowany. Has≈Ça bƒôdƒÖ wy≈õwietlane w oknach dialogowych.")
    
    app = SecurePassGUI()
    app.run()

if __name__ == "__main__":
    main()
